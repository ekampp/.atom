{"_id":"colorjoe","_rev":"33-8f102fd3e775cce83771882a0fd31853","name":"colorjoe","description":"Scaleable color picker","dist-tags":{"latest":"0.9.2"},"versions":{"0.5.5":{"name":"colorjoe","description":"Scaleable color picker","author":{"name":"Juho Vepsalainen","email":"bebraw@gmail.com"},"version":"0.5.5","dependencies":{"drag.js":"== 0.3.0","onecolor":"== 2.2.5"},"repository":{"type":"git","url":"https://bebraw@github.com/bebraw/colorjoe.git"},"homepage":"https://bebraw.github.com/colorjoe","bugs":{"url":"https://github.com/bebraw/colorjoe/issues"},"keywords":["color","colour","requirejs","amd"],"main":"dist/colorjoe.js","licenses":[{"type":"MIT","url":"https://github.com/bebraw/colorjoe/blob/master/LICENSE"}],"readme":"# colorjoe - The Scaleable Color Picker\n\ncolorjoe was somewhat inspired by\n[ColorJack](http://www.dynamicdrive.com/dynamicindex11/colorjack/index.htm) and\n[RightJS Colorpicker](http://rightjs.org/ui/colorpicker). Unlike those it\nactually scales pretty well. Essentially this means that you'll be able to\ndefine its actual dimensions and layout using a bit of CSS. This way the widget\nfits well responsive layouts.\n\nIn addition it's relatively easy to implement missing functionality (RGB fields,\nwhatnot) thanks to the simple API it provides.\n\n## Installation\n\nAdd prepackaged `dist/colorjoe.js` and `css/colorjoe.css` to you page or use AMD to load\nthe dependencies from `src/`.\n\n## Usage\n\n```javascript\nvar joe = colorjoe.rgb(element_id_or_dom_object, initial_color_value, extras);\n```\n\nor\n\n```javascript\nvar joe = colorjoe.hsl(element_id_or_dom_object, initial_color_value, extras);\n```\n\n### Event Handling\n\nThe returned joe object is an event emitter style object with `change` and\n`done` events. The `change` event is fired continuously when selecting and\n`done` is fired when user has stopped selecting.\n\n\n```javascript\njoe.on(\"change\", function(color) {\n    console.log(\"Selecting \" + color.css());\n});\n\njoe.on(\"done\", function(color) {\n    console.log(\"Selected \" + color.css());\n});\n```\n\nThe color object is from [one.color](https://github.com/One-com/one-color).\n\nGiven it might be nice to trigger these events immediately, there is a specific\n`update` method. Ie. joe.on(\"change\", function() {...}).update() would trigger\n`change` immediately. This is handy for initializing your work.\n\n### Get and Set\n\nIn addition there are `set` and `get` methods. Ie. joe.get() would return the\ncurrent color while joe.set('#aabbcc') would set it. `set` expects a parameter\nthat one.color default constructor would accept.\n\n### Extras\n\nIn order to make it easier to customize a picker based on your needs, colorjoe\nprovides a few extras. The following example shows how to use them:\n\n```javascript\nvar joe = colorjoe.hsl('hslPicker', 'red', [\n    colorjoe.extras.currentColor,\n    colorjoe.extras.fields('HSL', 255, 0),\n    colorjoe.extras.hex\n]);\n```\n\nThe code above would generate a HSL picker that shows in addition the currently\nselected color, HSL input fields and a hex field.\n\n`fields` extra is a factory that accepts name of a color space (RGB, HSL, HSV\nor CMYK). In addition it takes maximum value (defaults to 255) and a fix value\n(defaults to 2). fix represents the amount of numbers shown after decimal.\n\n## Contributors\n\n* [Juho Vepsäläinen](https://github.com/bebraw) - Core\n* [Esa-Matti Suuronen](https://github.com/epeli) -\n  [Grunt](https://github.com/cowboy/grunt) support + removeAllListeners\n* [Peter Müller](https://github.com/Munter) -\n  [one.color](https://github.com/One-com/one-color) + HTML tweaks\n\n## Hacking\n\nDownload the dependencies using `npm` (npm install) and then use [grunt](http://gruntjs.com/) to build prepackaged files in `dist/`.\n\n## License\n\ncolorjoe is available under MIT. See [LICENSE](https://github.com/bebraw/colorjoe/blob/master/LICENSE) for more details.\n\n","_id":"colorjoe@0.5.5","dist":{"shasum":"a82a969b92f8a97e75a862072fc5f35a2deba943","tarball":"http://registry.npmjs.org/colorjoe/-/colorjoe-0.5.5.tgz"},"maintainers":[{"name":"bebraw","email":"bebraw@gmail.com"}],"directories":{}},"0.5.6":{"name":"colorjoe","description":"Scaleable color picker","author":{"name":"Juho Vepsalainen","email":"bebraw@gmail.com"},"version":"0.5.6","dependencies":{"drag.js":"== 0.3.0","onecolor":"== 2.2.6"},"repository":{"type":"git","url":"https://bebraw@github.com/bebraw/colorjoe.git"},"homepage":"https://bebraw.github.com/colorjoe","bugs":{"url":"https://github.com/bebraw/colorjoe/issues"},"keywords":["color","colour","requirejs","amd"],"main":"dist/colorjoe.js","licenses":[{"type":"MIT","url":"https://github.com/bebraw/colorjoe/blob/master/LICENSE"}],"readme":"# colorjoe - The Scaleable Color Picker\n\ncolorjoe was somewhat inspired by\n[ColorJack](http://www.dynamicdrive.com/dynamicindex11/colorjack/index.htm) and\n[RightJS Colorpicker](http://rightjs.org/ui/colorpicker). Unlike those it\nactually scales pretty well. Essentially this means that you'll be able to\ndefine its actual dimensions and layout using a bit of CSS. This way the widget\nfits well responsive layouts.\n\nIn addition it's relatively easy to implement missing functionality (RGB fields,\nwhatnot) thanks to the simple API it provides.\n\n## Installation\n\nAdd prepackaged `dist/colorjoe.js` and `css/colorjoe.css` to you page or use AMD to load\nthe dependencies from `src/`.\n\n## Usage\n\n```javascript\nvar joe = colorjoe.rgb(element_id_or_dom_object, initial_color_value, extras);\n```\n\nor\n\n```javascript\nvar joe = colorjoe.hsl(element_id_or_dom_object, initial_color_value, extras);\n```\n\n### Event Handling\n\nThe returned joe object is an event emitter style object with `change` and\n`done` events. The `change` event is fired continuously when selecting and\n`done` is fired when user has stopped selecting.\n\n\n```javascript\njoe.on(\"change\", function(color) {\n    console.log(\"Selecting \" + color.css());\n});\n\njoe.on(\"done\", function(color) {\n    console.log(\"Selected \" + color.css());\n});\n```\n\nThe color object is from [one.color](https://github.com/One-com/one-color).\n\nGiven it might be nice to trigger these events immediately, there is a specific\n`update` method. Ie. joe.on(\"change\", function() {...}).update() would trigger\n`change` immediately. This is handy for initializing your work.\n\n### Get and Set\n\nIn addition there are `set` and `get` methods. Ie. joe.get() would return the\ncurrent color while joe.set('#aabbcc') would set it. `set` expects a parameter\nthat one.color default constructor would accept.\n\n### Extras\n\nIn order to make it easier to customize a picker based on your needs, colorjoe\nprovides a few extras. The following example shows how to use them:\n\n```javascript\nvar joe = colorjoe.hsl('hslPicker', 'red', [\n    colorjoe.extras.currentColor,\n    colorjoe.extras.fields('HSL', 255, 0),\n    colorjoe.extras.hex\n]);\n```\n\nThe code above would generate a HSL picker that shows in addition the currently\nselected color, HSL input fields and a hex field.\n\n`fields` extra is a factory that accepts name of a color space (RGB, HSL, HSV\nor CMYK). In addition it takes maximum value (defaults to 255) and a fix value\n(defaults to 2). fix represents the amount of numbers shown after decimal.\n\n## Contributors\n\n* [Juho Vepsäläinen](https://github.com/bebraw) - Core\n* [Esa-Matti Suuronen](https://github.com/epeli) -\n  [Grunt](https://github.com/cowboy/grunt) support + removeAllListeners\n* [Peter Müller](https://github.com/Munter) -\n  [one.color](https://github.com/One-com/one-color) + HTML tweaks\n\n## Hacking\n\nDownload the dependencies using `npm` (npm install) and then use [grunt](http://gruntjs.com/) to build prepackaged files in `dist/`.\n\n## License\n\ncolorjoe is available under MIT. See [LICENSE](https://github.com/bebraw/colorjoe/blob/master/LICENSE) for more details.\n\n","_id":"colorjoe@0.5.6","dist":{"shasum":"7d95c077187b8b1e17467234122732b94cf73432","tarball":"http://registry.npmjs.org/colorjoe/-/colorjoe-0.5.6.tgz"},"maintainers":[{"name":"bebraw","email":"bebraw@gmail.com"}],"directories":{}},"0.5.7":{"name":"colorjoe","description":"Scaleable color picker","author":{"name":"Juho Vepsalainen","email":"bebraw@gmail.com"},"version":"0.5.7","dependencies":{"drag.js":"== 0.3.1","onecolor":"== 2.2.6"},"repository":{"type":"git","url":"https://bebraw@github.com/bebraw/colorjoe.git"},"homepage":"https://bebraw.github.com/colorjoe","bugs":{"url":"https://github.com/bebraw/colorjoe/issues"},"keywords":["color","colour","requirejs","amd"],"main":"dist/colorjoe.js","licenses":[{"type":"MIT","url":"https://github.com/bebraw/colorjoe/blob/master/LICENSE"}],"readme":"# colorjoe - The Scaleable Color Picker\n\ncolorjoe was somewhat inspired by\n[ColorJack](http://www.dynamicdrive.com/dynamicindex11/colorjack/index.htm) and\n[RightJS Colorpicker](http://rightjs.org/ui/colorpicker). Unlike those it\nactually scales pretty well. Essentially this means that you'll be able to\ndefine its actual dimensions and layout using a bit of CSS. This way the widget\nfits well responsive layouts.\n\nIn addition it's relatively easy to implement missing functionality (RGB fields,\nwhatnot) thanks to the simple API it provides.\n\n## Installation\n\nAdd prepackaged `dist/colorjoe.js` and `css/colorjoe.css` to you page or use AMD to load\nthe dependencies from `src/`.\n\n## Usage\n\n```javascript\nvar joe = colorjoe.rgb(element_id_or_dom_object, initial_color_value, extras);\n```\n\nor\n\n```javascript\nvar joe = colorjoe.hsl(element_id_or_dom_object, initial_color_value, extras);\n```\n\n### Event Handling\n\nThe returned joe object is an event emitter style object with `change` and\n`done` events. The `change` event is fired continuously when selecting and\n`done` is fired when user has stopped selecting.\n\n\n```javascript\njoe.on(\"change\", function(color) {\n    console.log(\"Selecting \" + color.css());\n});\n\njoe.on(\"done\", function(color) {\n    console.log(\"Selected \" + color.css());\n});\n```\n\nThe color object is from [one.color](https://github.com/One-com/one-color).\n\nGiven it might be nice to trigger these events immediately, there is a specific\n`update` method. Ie. joe.on(\"change\", function() {...}).update() would trigger\n`change` immediately. This is handy for initializing your work.\n\n### Get and Set\n\nIn addition there are `set` and `get` methods. Ie. joe.get() would return the\ncurrent color while joe.set('#aabbcc') would set it. `set` expects a parameter\nthat one.color default constructor would accept.\n\n### Extras\n\nIn order to make it easier to customize a picker based on your needs, colorjoe\nprovides a few extras. The following example shows how to use them:\n\n```javascript\nvar joe = colorjoe.hsl('hslPicker', 'red', [\n    colorjoe.extras.currentColor,\n    colorjoe.extras.fields('HSL', 255, 0),\n    colorjoe.extras.hex\n]);\n```\n\nThe code above would generate a HSL picker that shows in addition the currently\nselected color, HSL input fields and a hex field.\n\n`fields` extra is a factory that accepts name of a color space (RGB, HSL, HSV\nor CMYK). In addition it takes maximum value (defaults to 255) and a fix value\n(defaults to 2). fix represents the amount of numbers shown after decimal.\n\n## Contributors\n\n* [Juho Vepsäläinen](https://github.com/bebraw) - Core\n* [Esa-Matti Suuronen](https://github.com/epeli) -\n  [Grunt](https://github.com/cowboy/grunt) support + removeAllListeners\n* [Peter Müller](https://github.com/Munter) -\n  [one.color](https://github.com/One-com/one-color) + HTML tweaks\n\n## Hacking\n\nDownload the dependencies using `npm` (npm install) and then use [grunt](http://gruntjs.com/) to build prepackaged files in `dist/`.\n\n## License\n\ncolorjoe is available under MIT. See [LICENSE](https://github.com/bebraw/colorjoe/blob/master/LICENSE) for more details.\n\n","_id":"colorjoe@0.5.7","dist":{"shasum":"f3649481809e9ced911b56b6ed8257623c4c7ff3","tarball":"http://registry.npmjs.org/colorjoe/-/colorjoe-0.5.7.tgz"},"maintainers":[{"name":"bebraw","email":"bebraw@gmail.com"}],"directories":{}},"0.5.8":{"name":"colorjoe","description":"Scaleable color picker","author":{"name":"Juho Vepsalainen","email":"bebraw@gmail.com"},"version":"0.5.8","dependencies":{"drag.js":"== 0.3.1","onecolor":"== 2.2.6"},"repository":{"type":"git","url":"https://bebraw@github.com/bebraw/colorjoe.git"},"homepage":"https://bebraw.github.com/colorjoe","bugs":{"url":"https://github.com/bebraw/colorjoe/issues"},"keywords":["color","colour","requirejs","amd"],"main":"dist/colorjoe.js","licenses":[{"type":"MIT","url":"https://github.com/bebraw/colorjoe/blob/master/LICENSE"}],"readme":"# colorjoe - The Scaleable Color Picker\n\ncolorjoe was somewhat inspired by\n[ColorJack](http://www.dynamicdrive.com/dynamicindex11/colorjack/index.htm) and\n[RightJS Colorpicker](http://rightjs.org/ui/colorpicker). Unlike those it\nactually scales pretty well. Essentially this means that you'll be able to\ndefine its actual dimensions and layout using a bit of CSS. This way the widget\nfits well responsive layouts.\n\nIn addition it's relatively easy to implement missing functionality (RGB fields,\nwhatnot) thanks to the simple API it provides.\n\n## Installation\n\nAdd prepackaged `dist/colorjoe.js` and `css/colorjoe.css` to you page or use AMD to load\nthe dependencies from `src/`.\n\n## Usage\n\n```javascript\nvar joe = colorjoe.rgb(element_id_or_dom_object, initial_color_value, extras);\n```\n\nor\n\n```javascript\nvar joe = colorjoe.hsl(element_id_or_dom_object, initial_color_value, extras);\n```\n\n### Event Handling\n\nThe returned joe object is an event emitter style object with `change` and\n`done` events. The `change` event is fired continuously when selecting and\n`done` is fired when user has stopped selecting.\n\n\n```javascript\njoe.on(\"change\", function(color) {\n    console.log(\"Selecting \" + color.css());\n});\n\njoe.on(\"done\", function(color) {\n    console.log(\"Selected \" + color.css());\n});\n```\n\nThe color object is from [one.color](https://github.com/One-com/one-color).\n\nGiven it might be nice to trigger these events immediately, there is a specific\n`update` method. Ie. joe.on(\"change\", function() {...}).update() would trigger\n`change` immediately. This is handy for initializing your work.\n\n### Get and Set\n\nIn addition there are `set` and `get` methods. Ie. joe.get() would return the\ncurrent color while joe.set('#aabbcc') would set it. `set` expects a parameter\nthat one.color default constructor would accept.\n\n### Extras\n\nIn order to make it easier to customize a picker based on your needs, colorjoe\nprovides a few extras. The following example shows how to use them:\n\n```javascript\nvar joe = colorjoe.hsl('hslPicker', 'red', [\n    colorjoe.extras.currentColor,\n    colorjoe.extras.fields('HSL', 255, 0),\n    colorjoe.extras.hex\n]);\n```\n\nThe code above would generate a HSL picker that shows in addition the currently\nselected color, HSL input fields and a hex field.\n\n`fields` extra is a factory that accepts name of a color space (RGB, HSL, HSV\nor CMYK). In addition it takes maximum value (defaults to 255) and a fix value\n(defaults to 2). fix represents the amount of numbers shown after decimal.\n\n## Contributors\n\n* [Juho Vepsäläinen](https://github.com/bebraw) - Core\n* [Esa-Matti Suuronen](https://github.com/epeli) -\n  [Grunt](https://github.com/cowboy/grunt) support + removeAllListeners\n* [Peter Müller](https://github.com/Munter) -\n  [one.color](https://github.com/One-com/one-color) + HTML tweaks\n\n## Hacking\n\nDownload the dependencies using `npm` (npm install) and then use [grunt](http://gruntjs.com/) to build prepackaged files in `dist/`.\n\n## License\n\ncolorjoe is available under MIT. See [LICENSE](https://github.com/bebraw/colorjoe/blob/master/LICENSE) for more details.\n\n","_id":"colorjoe@0.5.8","dist":{"shasum":"ab0eb5d8362ad77bf6a3e87efa99ad464fbcbac5","tarball":"http://registry.npmjs.org/colorjoe/-/colorjoe-0.5.8.tgz"},"maintainers":[{"name":"bebraw","email":"bebraw@gmail.com"}],"directories":{}},"0.5.9":{"name":"colorjoe","description":"Scaleable color picker","author":{"name":"Juho Vepsalainen","email":"bebraw@gmail.com"},"version":"0.5.9","dependencies":{"drag.js":"== 0.3.3","onecolor":"== 2.2.6"},"repository":{"type":"git","url":"https://bebraw@github.com/bebraw/colorjoe.git"},"homepage":"https://bebraw.github.com/colorjoe","bugs":{"url":"https://github.com/bebraw/colorjoe/issues"},"keywords":["color","colour","requirejs","amd"],"main":"dist/colorjoe.js","licenses":[{"type":"MIT","url":"https://github.com/bebraw/colorjoe/blob/master/LICENSE"}],"readme":"# colorjoe - The Scaleable Color Picker\n\ncolorjoe was somewhat inspired by\n[ColorJack](http://www.dynamicdrive.com/dynamicindex11/colorjack/index.htm) and\n[RightJS Colorpicker](http://rightjs.org/ui/colorpicker). Unlike those it\nactually scales pretty well. Essentially this means that you'll be able to\ndefine its actual dimensions and layout using a bit of CSS. This way the widget\nfits well responsive layouts.\n\nIn addition it's relatively easy to implement missing functionality (RGB fields,\nwhatnot) thanks to the simple API it provides.\n\n## Installation\n\nAdd prepackaged `dist/colorjoe.js` and `css/colorjoe.css` to you page or use AMD to load\nthe dependencies from `src/`.\n\n## Usage\n\n```javascript\nvar joe = colorjoe.rgb(element_id_or_dom_object, initial_color_value, extras);\n```\n\nor\n\n```javascript\nvar joe = colorjoe.hsl(element_id_or_dom_object, initial_color_value, extras);\n```\n\n### Event Handling\n\nThe returned joe object is an event emitter style object with `change` and\n`done` events. The `change` event is fired continuously when selecting and\n`done` is fired when user has stopped selecting.\n\n\n```javascript\njoe.on(\"change\", function(color) {\n    console.log(\"Selecting \" + color.css());\n});\n\njoe.on(\"done\", function(color) {\n    console.log(\"Selected \" + color.css());\n});\n```\n\nThe color object is from [one.color](https://github.com/One-com/one-color).\n\nGiven it might be nice to trigger these events immediately, there is a specific\n`update` method. Ie. joe.on(\"change\", function() {...}).update() would trigger\n`change` immediately. This is handy for initializing your work.\n\n### Get and Set\n\nIn addition there are `set` and `get` methods. Ie. joe.get() would return the\ncurrent color while joe.set('#aabbcc') would set it. `set` expects a parameter\nthat one.color default constructor would accept.\n\n### Extras\n\nIn order to make it easier to customize a picker based on your needs, colorjoe\nprovides a few extras. The following example shows how to use them:\n\n```javascript\nvar joe = colorjoe.hsl('hslPicker', 'red', [\n    colorjoe.extras.currentColor,\n    colorjoe.extras.fields('HSL', 255, 0),\n    colorjoe.extras.hex\n]);\n```\n\nThe code above would generate a HSL picker that shows in addition the currently\nselected color, HSL input fields and a hex field.\n\n`fields` extra is a factory that accepts name of a color space (RGB, HSL, HSV\nor CMYK). In addition it takes maximum value (defaults to 255) and a fix value\n(defaults to 2). fix represents the amount of numbers shown after decimal.\n\n## Contributors\n\n* [Juho Vepsäläinen](https://github.com/bebraw) - Core\n* [Esa-Matti Suuronen](https://github.com/epeli) -\n  [Grunt](https://github.com/cowboy/grunt) support + removeAllListeners\n* [Peter Müller](https://github.com/Munter) -\n  [one.color](https://github.com/One-com/one-color) + HTML tweaks\n\n## Hacking\n\nDownload the dependencies using `npm` (npm install) and then use [grunt](http://gruntjs.com/) to build prepackaged files in `dist/`.\n\n## License\n\ncolorjoe is available under MIT. See [LICENSE](https://github.com/bebraw/colorjoe/blob/master/LICENSE) for more details.\n\n","_id":"colorjoe@0.5.9","dist":{"shasum":"7fa64a51648c84a2e000d8c78d2bac41140c6cef","tarball":"http://registry.npmjs.org/colorjoe/-/colorjoe-0.5.9.tgz"},"maintainers":[{"name":"bebraw","email":"bebraw@gmail.com"}],"directories":{}},"0.6.0":{"name":"colorjoe","description":"Scaleable color picker","author":{"name":"Juho Vepsalainen","email":"bebraw@gmail.com"},"version":"0.6.0","dependencies":{"drag.js":"== 0.3.4","onecolor":"== 2.2.6"},"repository":{"type":"git","url":"https://bebraw@github.com/bebraw/colorjoe.git"},"homepage":"https://bebraw.github.com/colorjoe","bugs":{"url":"https://github.com/bebraw/colorjoe/issues"},"keywords":["color","colour","requirejs","amd"],"main":"dist/colorjoe.js","licenses":[{"type":"MIT","url":"https://github.com/bebraw/colorjoe/blob/master/LICENSE"}],"readme":"# colorjoe - The Scaleable Color Picker\n\ncolorjoe was somewhat inspired by\n[ColorJack](http://www.dynamicdrive.com/dynamicindex11/colorjack/index.htm) and\n[RightJS Colorpicker](http://rightjs.org/ui/colorpicker). Unlike those it\nactually scales pretty well. Essentially this means that you'll be able to\ndefine its actual dimensions and layout using a bit of CSS. This way the widget\nfits well responsive layouts.\n\nIn addition it's relatively easy to implement missing functionality (RGB fields,\nwhatnot) thanks to the simple API it provides.\n\n## Installation\n\nAdd prepackaged `dist/colorjoe.js` and `css/colorjoe.css` to you page or use AMD to load\nthe dependencies from `src/`.\n\n## Usage\n\n```javascript\nvar joe = colorjoe.rgb(element_id_or_dom_object, initial_color_value, extras);\n```\n\nor\n\n```javascript\nvar joe = colorjoe.hsl(element_id_or_dom_object, initial_color_value, extras);\n```\n\n### Event Handling\n\nThe returned joe object is an event emitter style object with `change` and\n`done` events. The `change` event is fired continuously when selecting and\n`done` is fired when user has stopped selecting.\n\n\n```javascript\njoe.on(\"change\", function(color) {\n    console.log(\"Selecting \" + color.css());\n});\n\njoe.on(\"done\", function(color) {\n    console.log(\"Selected \" + color.css());\n});\n```\n\nThe color object is from [one.color](https://github.com/One-com/one-color).\n\nGiven it might be nice to trigger these events immediately, there is a specific\n`update` method. Ie. joe.on(\"change\", function() {...}).update() would trigger\n`change` immediately. This is handy for initializing your work.\n\n### Get and Set\n\nIn addition there are `set` and `get` methods. Ie. joe.get() would return the\ncurrent color while joe.set('#aabbcc') would set it. `set` expects a parameter\nthat one.color default constructor would accept.\n\n### Extras\n\nIn order to make it easier to customize a picker based on your needs, colorjoe\nprovides a few extras. The following example shows how to use them:\n\n```javascript\nvar joe = colorjoe.hsl('hslPicker', 'red', [\n    colorjoe.extras.currentColor,\n    colorjoe.extras.fields('HSL', 255, 0),\n    colorjoe.extras.hex\n]);\n```\n\nThe code above would generate a HSL picker that shows in addition the currently\nselected color, HSL input fields and a hex field.\n\n`fields` extra is a factory that accepts name of a color space (RGB, HSL, HSV\nor CMYK). In addition it takes maximum value (defaults to 255) and a fix value\n(defaults to 2). fix represents the amount of numbers shown after decimal.\n\n## Contributors\n\n* [Juho Vepsäläinen](https://github.com/bebraw) - Core\n* [Esa-Matti Suuronen](https://github.com/epeli) -\n  [Grunt](https://github.com/cowboy/grunt) support + removeAllListeners\n* [Peter Müller](https://github.com/Munter) -\n  [one.color](https://github.com/One-com/one-color) + HTML tweaks\n\n## Hacking\n\nDownload the dependencies using `npm` (npm install) and then use [grunt](http://gruntjs.com/) to build prepackaged files in `dist/`.\n\n## License\n\ncolorjoe is available under MIT. See [LICENSE](https://github.com/bebraw/colorjoe/blob/master/LICENSE) for more details.\n\n","_id":"colorjoe@0.6.0","dist":{"shasum":"eaf2b9e5e6f004b1babf1cda3417326a294f986a","tarball":"http://registry.npmjs.org/colorjoe/-/colorjoe-0.6.0.tgz"},"maintainers":[{"name":"bebraw","email":"bebraw@gmail.com"}],"directories":{}},"0.6.1":{"name":"colorjoe","description":"Scaleable color picker","author":{"name":"Juho Vepsalainen","email":"bebraw@gmail.com"},"version":"0.6.1","dependencies":{"drag.js":"== 0.3.4","onecolor":"== 2.2.6"},"repository":{"type":"git","url":"https://bebraw@github.com/bebraw/colorjoe.git"},"homepage":"https://bebraw.github.com/colorjoe","bugs":{"url":"https://github.com/bebraw/colorjoe/issues"},"keywords":["color","colour","requirejs","amd"],"main":"dist/colorjoe.js","licenses":[{"type":"MIT","url":"https://github.com/bebraw/colorjoe/blob/master/LICENSE"}],"readme":"# colorjoe - The Scaleable Color Picker\n\ncolorjoe was somewhat inspired by\n[ColorJack](http://www.dynamicdrive.com/dynamicindex11/colorjack/index.htm) and\n[RightJS Colorpicker](http://rightjs.org/ui/colorpicker). Unlike those it\nactually scales pretty well. Essentially this means that you'll be able to\ndefine its actual dimensions and layout using a bit of CSS. This way the widget\nfits well responsive layouts.\n\nIn addition it's relatively easy to implement missing functionality (RGB fields,\nwhatnot) thanks to the simple API it provides.\n\n## Installation\n\nAdd prepackaged `dist/colorjoe.js` and `css/colorjoe.css` to you page or use AMD to load\nthe dependencies from `src/`.\n\n## Usage\n\n```javascript\nvar joe = colorjoe.rgb(element_id_or_dom_object, initial_color_value, extras);\n```\n\nor\n\n```javascript\nvar joe = colorjoe.hsl(element_id_or_dom_object, initial_color_value, extras);\n```\n\n### Event Handling\n\nThe returned joe object is an event emitter style object with `change` and\n`done` events. The `change` event is fired continuously when selecting and\n`done` is fired when user has stopped selecting.\n\n\n```javascript\njoe.on(\"change\", function(color) {\n    console.log(\"Selecting \" + color.css());\n});\n\njoe.on(\"done\", function(color) {\n    console.log(\"Selected \" + color.css());\n});\n```\n\nThe color object is from [one.color](https://github.com/One-com/one-color).\n\nGiven it might be nice to trigger these events immediately, there is a specific\n`update` method. Ie. joe.on(\"change\", function() {...}).update() would trigger\n`change` immediately. This is handy for initializing your work.\n\n### Get and Set\n\nIn addition there are `set` and `get` methods. Ie. joe.get() would return the\ncurrent color while joe.set('#aabbcc') would set it. `set` expects a parameter\nthat one.color default constructor would accept.\n\n### Extras\n\nIn order to make it easier to customize a picker based on your needs, colorjoe\nprovides a few extras. The following example shows how to use them:\n\n```javascript\nvar joe = colorjoe.hsl('hslPicker', 'red', [\n    colorjoe.extras.currentColor,\n    colorjoe.extras.fields('HSL', 255, 0),\n    colorjoe.extras.hex\n]);\n```\n\nThe code above would generate a HSL picker that shows in addition the currently\nselected color, HSL input fields and a hex field.\n\n`fields` extra is a factory that accepts name of a color space (RGB, HSL, HSV\nor CMYK). In addition it takes maximum value (defaults to 255) and a fix value\n(defaults to 2). fix represents the amount of numbers shown after decimal.\n\n## Contributors\n\n* [Juho Vepsäläinen](https://github.com/bebraw) - Core\n* [Esa-Matti Suuronen](https://github.com/epeli) -\n  [Grunt](https://github.com/cowboy/grunt) support + removeAllListeners\n* [Peter Müller](https://github.com/Munter) -\n  [one.color](https://github.com/One-com/one-color) + HTML tweaks\n\n## Hacking\n\nDownload the dependencies using `npm` (npm install) and then use [grunt](http://gruntjs.com/) to build prepackaged files in `dist/`.\n\n## License\n\ncolorjoe is available under MIT. See [LICENSE](https://github.com/bebraw/colorjoe/blob/master/LICENSE) for more details.\n\n","_id":"colorjoe@0.6.1","dist":{"shasum":"ed82d73dbdfe11ab8849176319d2f647853cfc5d","tarball":"http://registry.npmjs.org/colorjoe/-/colorjoe-0.6.1.tgz"},"maintainers":[{"name":"bebraw","email":"bebraw@gmail.com"}],"directories":{}},"0.6.2":{"name":"colorjoe","description":"Scaleable color picker","author":{"name":"Juho Vepsalainen","email":"bebraw@gmail.com"},"version":"0.6.2","dependencies":{"drag.js":"== 0.3.7","onecolor":"== 2.2.6"},"repository":{"type":"git","url":"https://bebraw@github.com/bebraw/colorjoe.git"},"homepage":"https://bebraw.github.com/colorjoe","bugs":{"url":"https://github.com/bebraw/colorjoe/issues"},"keywords":["color","colour","requirejs","amd"],"main":"dist/colorjoe.js","licenses":[{"type":"MIT","url":"https://github.com/bebraw/colorjoe/blob/master/LICENSE"}],"readme":"# colorjoe - The Scaleable Color Picker\n\ncolorjoe was somewhat inspired by\n[ColorJack](http://www.dynamicdrive.com/dynamicindex11/colorjack/index.htm) and\n[RightJS Colorpicker](http://rightjs.org/ui/colorpicker). Unlike those it\nactually scales pretty well. Essentially this means that you'll be able to\ndefine its actual dimensions and layout using a bit of CSS. This way the widget\nfits well responsive layouts.\n\nIn addition it's relatively easy to implement missing functionality (RGB fields,\nwhatnot) thanks to the simple API it provides.\n\n## Installation\n\nAdd prepackaged `dist/colorjoe.js` and `css/colorjoe.css` to you page or use AMD to load\nthe dependencies from `src/`.\n\n## Usage\n\n```javascript\nvar joe = colorjoe.rgb(element_id_or_dom_object, initial_color_value, extras);\n```\n\nor\n\n```javascript\nvar joe = colorjoe.hsl(element_id_or_dom_object, initial_color_value, extras);\n```\n\n### Event Handling\n\nThe returned joe object is an event emitter style object with `change` and\n`done` events. The `change` event is fired continuously when selecting and\n`done` is fired when user has stopped selecting.\n\n\n```javascript\njoe.on(\"change\", function(color) {\n    console.log(\"Selecting \" + color.css());\n});\n\njoe.on(\"done\", function(color) {\n    console.log(\"Selected \" + color.css());\n});\n```\n\nThe color object is from [one.color](https://github.com/One-com/one-color).\n\nGiven it might be nice to trigger these events immediately, there is a specific\n`update` method. Ie. joe.on(\"change\", function() {...}).update() would trigger\n`change` immediately. This is handy for initializing your work.\n\n### Get and Set\n\nIn addition there are `set` and `get` methods. Ie. joe.get() would return the\ncurrent color while joe.set('#aabbcc') would set it. `set` expects a parameter\nthat one.color default constructor would accept.\n\n### Extras\n\nIn order to make it easier to customize a picker based on your needs, colorjoe\nprovides a few extras. The following example shows how to use them:\n\n```javascript\nvar joe = colorjoe.hsl('hslPicker', 'red', [\n    colorjoe.extras.currentColor,\n    colorjoe.extras.fields('HSL', 255, 0),\n    colorjoe.extras.hex\n]);\n```\n\nThe code above would generate a HSL picker that shows in addition the currently\nselected color, HSL input fields and a hex field.\n\n`fields` extra is a factory that accepts name of a color space (RGB, HSL, HSV\nor CMYK). In addition it takes maximum value (defaults to 255) and a fix value\n(defaults to 2). fix represents the amount of numbers shown after decimal.\n\n## Contributors\n\n* [Juho Vepsäläinen](https://github.com/bebraw) - Core\n* [Esa-Matti Suuronen](https://github.com/epeli) -\n  [Grunt](https://github.com/cowboy/grunt) support + removeAllListeners\n* [Peter Müller](https://github.com/Munter) -\n  [one.color](https://github.com/One-com/one-color) + HTML tweaks\n\n## Hacking\n\nDownload the dependencies using `npm` (npm install) and then use [grunt](http://gruntjs.com/) to build prepackaged files in `dist/`.\n\n## License\n\ncolorjoe is available under MIT. See [LICENSE](https://github.com/bebraw/colorjoe/blob/master/LICENSE) for more details.\n\n","_id":"colorjoe@0.6.2","dist":{"shasum":"535d1f8a2c0da7e7417e1e41411478db9abedda0","tarball":"http://registry.npmjs.org/colorjoe/-/colorjoe-0.6.2.tgz"},"maintainers":[{"name":"bebraw","email":"bebraw@gmail.com"}],"directories":{}},"0.7.0":{"name":"colorjoe","description":"Scaleable color picker","author":{"name":"Juho Vepsalainen","email":"bebraw@gmail.com"},"version":"0.7.0","dependencies":{"drag.js":"== 0.3.8","onecolor":"== 2.2.6"},"repository":{"type":"git","url":"https://bebraw@github.com/bebraw/colorjoe.git"},"homepage":"https://bebraw.github.com/colorjoe","bugs":{"url":"https://github.com/bebraw/colorjoe/issues"},"keywords":["color","colour","requirejs","amd"],"main":"dist/colorjoe.js","licenses":[{"type":"MIT","url":"https://github.com/bebraw/colorjoe/blob/master/LICENSE"}],"readme":"# colorjoe - The Scaleable Color Picker\n\ncolorjoe was somewhat inspired by\n[ColorJack](http://www.dynamicdrive.com/dynamicindex11/colorjack/index.htm) and\n[RightJS Colorpicker](http://rightjs.org/ui/colorpicker). Unlike those it\nactually scales pretty well. Essentially this means that you'll be able to\ndefine its actual dimensions and layout using a bit of CSS. This way the widget\nfits well responsive layouts.\n\nIn addition it's relatively easy to implement missing functionality (RGB fields,\nwhatnot) thanks to the simple API it provides.\n\n## Installation\n\nAdd prepackaged `dist/colorjoe.js` and `css/colorjoe.css` to you page or use AMD to load\nthe dependencies from `src/`.\n\n## Usage\n\n```javascript\nvar joe = colorjoe.rgb(element_id_or_dom_object, initial_color_value, extras);\n```\n\nor\n\n```javascript\nvar joe = colorjoe.hsl(element_id_or_dom_object, initial_color_value, extras);\n```\n\n### Event Handling\n\nThe returned joe object is an event emitter style object with `change` and\n`done` events. The `change` event is fired continuously when selecting and\n`done` is fired when user has stopped selecting.\n\n\n```javascript\njoe.on(\"change\", function(color) {\n    console.log(\"Selecting \" + color.css());\n});\n\njoe.on(\"done\", function(color) {\n    console.log(\"Selected \" + color.css());\n});\n```\n\nThe color object is from [one.color](https://github.com/One-com/one-color).\n\nGiven it might be nice to trigger these events immediately, there is a specific\n`update` method. Ie. joe.on(\"change\", function() {...}).update() would trigger\n`change` immediately. This is handy for initializing your work.\n\n### Get and Set\n\nIn addition there are `set` and `get` methods. Ie. joe.get() would return the\ncurrent color while joe.set('#aabbcc') would set it. `set` expects a parameter\nthat one.color default constructor would accept.\n\n### Extras\n\nIn order to make it easier to customize a picker based on your needs, colorjoe\nprovides a few extras. The following example shows how to use them:\n\n```javascript\nvar joe = colorjoe.hsl('hslPicker', 'red', [\n    'currentColor',\n    'alpha',\n    ['fields', {space: 'HSL', limit: 255, fix: 0},\n    'hex'\n]);\n```\n\nThe code above would generate a HSL picker that shows in addition the currently\nselected color, alpha slider, HSL input fields and a hex field.\n\nAs you can see `fields` has been defined using an array. This array contains\nthe name of the extra and then parameters passed to inside an object. In this\ncase the extra accepts name of a color space (RGB, HSL, HSV or CMYK). If you\nappend `A` to the color space, it will show a control for alpha too. In\naddition it takes a limit value (defaults to 255) and a fix value\n(defaults to 0). fix represents the amount of numbers shown after decimal.\n\n`hex` extra accepts optional `label`. If set it will show that as the input's\nlabel.\n\n### Implementing Custom Extras\n\nIt is possible to implement your custom extras without having to hack the core\ncode. This can be done as follows:\n\n```javascript\ncolorjoe.registerExtra('text', function(p, joe, o) {\n    // attach new elements to p element here (as children that is)\n    // o is optional and will contain any parameters you might have\n    // passed to the extra using the array syntax\n\n    // optional return. these are triggered by colorjoe\n    // use this way instead of joe.on\n    return {\n        change: function(col) {},\n        done: function(col) {}\n    };\n})\n```\n\nNow you can simply pass your `text` extra amongst the others and it will just\nwork.\n\n## Contributors\n\n* [Juho Vepsäläinen](https://github.com/bebraw) - Core\n* [Esa-Matti Suuronen](https://github.com/epeli) -\n  [Grunt](https://github.com/cowboy/grunt) support + removeAllListeners\n* [Peter Müller](https://github.com/Munter) -\n  [one.color](https://github.com/One-com/one-color) + HTML tweaks\n\n## Hacking\n\nDownload the dependencies using `npm` (npm install) and then use [grunt](http://gruntjs.com/) to build prepackaged files in `dist/`.\n\n## License\n\ncolorjoe is available under MIT. See [LICENSE](https://github.com/bebraw/colorjoe/blob/master/LICENSE) for more details.\n\n","_id":"colorjoe@0.7.0","dist":{"shasum":"2515a5407b00ba69365579c5caac74afbc8a7fc6","tarball":"http://registry.npmjs.org/colorjoe/-/colorjoe-0.7.0.tgz"},"maintainers":[{"name":"bebraw","email":"bebraw@gmail.com"}],"directories":{}},"0.7.1":{"name":"colorjoe","description":"Scaleable color picker","author":{"name":"Juho Vepsalainen","email":"bebraw@gmail.com"},"version":"0.7.1","dependencies":{"drag.js":"== 0.3.8","onecolor":"== 2.3.0"},"repository":{"type":"git","url":"https://bebraw@github.com/bebraw/colorjoe.git"},"homepage":"https://bebraw.github.com/colorjoe","bugs":{"url":"https://github.com/bebraw/colorjoe/issues"},"keywords":["color","colour","requirejs","amd"],"main":"dist/colorjoe.js","licenses":[{"type":"MIT","url":"https://github.com/bebraw/colorjoe/blob/master/LICENSE"}],"readme":"# colorjoe - The Scaleable Color Picker\n\ncolorjoe was somewhat inspired by\n[ColorJack](http://www.dynamicdrive.com/dynamicindex11/colorjack/index.htm) and\n[RightJS Colorpicker](http://rightjs.org/ui/colorpicker). Unlike those it\nactually scales pretty well. Essentially this means that you'll be able to\ndefine its actual dimensions and layout using a bit of CSS. This way the widget\nfits well responsive layouts.\n\nIn addition it's relatively easy to implement missing functionality (RGB fields,\nwhatnot) thanks to the simple API it provides.\n\n## Installation\n\nAdd prepackaged `dist/colorjoe.js` and `css/colorjoe.css` to your page or use AMD to load\nthe dependencies from `src/`.\n\n## Usage\n\n```javascript\nvar joe = colorjoe.rgb(element_id_or_dom_object, initial_color_value, extras);\n```\n\nor\n\n```javascript\nvar joe = colorjoe.hsl(element_id_or_dom_object, initial_color_value, extras);\n```\n\n### Event Handling\n\nThe returned joe object is an event emitter style object with `change` and\n`done` events. The `change` event is fired continuously when selecting and\n`done` is fired when user has stopped selecting.\n\n\n```javascript\njoe.on(\"change\", function(color) {\n    console.log(\"Selecting \" + color.css());\n});\n\njoe.on(\"done\", function(color) {\n    console.log(\"Selected \" + color.css());\n});\n```\n\nThe color object is from [one.color](https://github.com/One-com/one-color).\n\nGiven it might be nice to trigger these events immediately, there is a specific\n`update` method. Ie. joe.on(\"change\", function() {...}).update() would trigger\n`change` immediately. This is handy for initializing your work.\n\n### Get and Set\n\nIn addition there are `set` and `get` methods. Ie. joe.get() would return the\ncurrent color while joe.set('#aabbcc') would set it. `set` expects a parameter\nthat one.color default constructor would accept.\n\n### Extras\n\nIn order to make it easier to customize a picker based on your needs, colorjoe\nprovides a few extras. The following example shows how to use them:\n\n```javascript\nvar joe = colorjoe.hsl('hslPicker', 'red', [\n    'currentColor',\n    'alpha',\n    ['fields', {space: 'HSL', limit: 255, fix: 0},\n    'hex'\n]);\n```\n\nThe code above would generate a HSL picker that shows in addition the currently\nselected color, alpha slider, HSL input fields and a hex field.\n\nAs you can see `fields` has been defined using an array. This array contains\nthe name of the extra and then parameters passed to inside an object. In this\ncase the extra accepts name of a color space (RGB, HSL, HSV or CMYK). If you\nappend `A` to the color space, it will show a control for alpha too. In\naddition it takes a limit value (defaults to 255) and a fix value\n(defaults to 0). fix represents the amount of numbers shown after decimal.\n\n`hex` extra accepts optional `label`. If set it will show that as the input's\nlabel.\n\n### Implementing Custom Extras\n\nIt is possible to implement your custom extras without having to hack the core\ncode. This can be done as follows:\n\n```javascript\ncolorjoe.registerExtra('text', function(p, joe, o) {\n    // attach new elements to p element here (as children that is)\n    // o is optional and will contain any parameters you might have\n    // passed to the extra using the array syntax\n\n    // optional return. these are triggered by colorjoe\n    // use this way instead of joe.on\n    return {\n        change: function(col) {},\n        done: function(col) {}\n    };\n})\n```\n\nNow you can simply pass your `text` extra amongst the others and it will just\nwork.\n\n## Contributors\n\n* [Juho Vepsäläinen](https://github.com/bebraw) - Core\n* [Esa-Matti Suuronen](https://github.com/epeli) -\n  [Grunt](https://github.com/cowboy/grunt) support + removeAllListeners\n* [Peter Müller](https://github.com/Munter) -\n  [one.color](https://github.com/One-com/one-color) + HTML tweaks\n\n## Hacking\n\nDownload the dependencies using `npm` (npm install) and then use [grunt](http://gruntjs.com/) to build prepackaged files in `dist/`.\n\n## License\n\ncolorjoe is available under MIT. See [LICENSE](https://github.com/bebraw/colorjoe/blob/master/LICENSE) for more details.\n\n","_id":"colorjoe@0.7.1","dist":{"shasum":"7d64fb72a96d9918e7a2006b4b26f10d1b6e3a28","tarball":"http://registry.npmjs.org/colorjoe/-/colorjoe-0.7.1.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"bebraw","email":"bebraw@gmail.com"},"maintainers":[{"name":"bebraw","email":"bebraw@gmail.com"}],"directories":{}},"0.7.2":{"name":"colorjoe","description":"Scaleable color picker","author":{"name":"Juho Vepsalainen","email":"bebraw@gmail.com"},"version":"0.7.2","dependencies":{"drag.js":"== 0.3.8","onecolor":"== 2.3.0"},"repository":{"type":"git","url":"https://bebraw@github.com/bebraw/colorjoe.git"},"homepage":"https://bebraw.github.com/colorjoe","bugs":{"url":"https://github.com/bebraw/colorjoe/issues"},"keywords":["color","colour","requirejs","amd"],"main":"dist/colorjoe.js","licenses":[{"type":"MIT","url":"https://github.com/bebraw/colorjoe/blob/master/LICENSE"}],"readme":"# colorjoe - The Scaleable Color Picker\n\ncolorjoe was somewhat inspired by\n[ColorJack](http://www.dynamicdrive.com/dynamicindex11/colorjack/index.htm) and\n[RightJS Colorpicker](http://rightjs.org/ui/colorpicker). Unlike those it\nactually scales pretty well. Essentially this means that you'll be able to\ndefine its actual dimensions and layout using a bit of CSS. This way the widget\nfits well responsive layouts.\n\nIn addition it's relatively easy to implement missing functionality (RGB fields,\nwhatnot) thanks to the simple API it provides.\n\n## Installation\n\nAdd prepackaged `dist/colorjoe.js` and `css/colorjoe.css` to your page or use AMD to load\nthe dependencies from `src/`.\n\n## Usage\n\n```javascript\nvar joe = colorjoe.rgb(element_id_or_dom_object, initial_color_value, extras);\n```\n\nor\n\n```javascript\nvar joe = colorjoe.hsl(element_id_or_dom_object, initial_color_value, extras);\n```\n\n### Event Handling\n\nThe returned joe object is an event emitter style object with `change` and\n`done` events. The `change` event is fired continuously when selecting and\n`done` is fired when user has stopped selecting.\n\n\n```javascript\njoe.on(\"change\", function(color) {\n    console.log(\"Selecting \" + color.css());\n});\n\njoe.on(\"done\", function(color) {\n    console.log(\"Selected \" + color.css());\n});\n```\n\nThe color object is from [one.color](https://github.com/One-com/one-color).\n\nGiven it might be nice to trigger these events immediately, there is a specific\n`update` method. Ie. joe.on(\"change\", function() {...}).update() would trigger\n`change` immediately. This is handy for initializing your work.\n\n### Get and Set\n\nIn addition there are `set` and `get` methods. Ie. joe.get() would return the\ncurrent color while joe.set('#aabbcc') would set it. `set` expects a parameter\nthat one.color default constructor would accept.\n\n### Extras\n\nIn order to make it easier to customize a picker based on your needs, colorjoe\nprovides a few extras. The following example shows how to use them:\n\n```javascript\nvar joe = colorjoe.hsl('hslPicker', 'red', [\n    'currentColor',\n    'alpha',\n    ['fields', {space: 'HSL', limit: 255, fix: 0},\n    'hex'\n]);\n```\n\nThe code above would generate a HSL picker that shows in addition the currently\nselected color, alpha slider, HSL input fields and a hex field.\n\nAs you can see `fields` has been defined using an array. This array contains\nthe name of the extra and then parameters passed to inside an object. In this\ncase the extra accepts name of a color space (RGB, HSL, HSV or CMYK). If you\nappend `A` to the color space, it will show a control for alpha too. In\naddition it takes a limit value (defaults to 255) and a fix value\n(defaults to 0). fix represents the amount of numbers shown after decimal.\n\n`hex` extra accepts optional `label`. If set it will show that as the input's\nlabel.\n\n### Implementing Custom Extras\n\nIt is possible to implement your custom extras without having to hack the core\ncode. This can be done as follows:\n\n```javascript\ncolorjoe.registerExtra('text', function(p, joe, o) {\n    // attach new elements to p element here (as children that is)\n    // o is optional and will contain any parameters you might have\n    // passed to the extra using the array syntax\n\n    // optional return. these are triggered by colorjoe\n    // use this way instead of joe.on\n    return {\n        change: function(col) {},\n        done: function(col) {}\n    };\n})\n```\n\nNow you can simply pass your `text` extra amongst the others and it will just\nwork.\n\n## Contributors\n\n* [Juho Vepsäläinen](https://github.com/bebraw) - Core\n* [Esa-Matti Suuronen](https://github.com/epeli) -\n  [Grunt](https://github.com/cowboy/grunt) support + removeAllListeners\n* [Peter Müller](https://github.com/Munter) -\n  [one.color](https://github.com/One-com/one-color) + HTML tweaks\n\n## Hacking\n\nDownload the dependencies using `npm` (npm install) and then use [grunt](http://gruntjs.com/) to build prepackaged files in `dist/`.\n\n## License\n\ncolorjoe is available under MIT. See [LICENSE](https://github.com/bebraw/colorjoe/blob/master/LICENSE) for more details.\n\n","_id":"colorjoe@0.7.2","dist":{"shasum":"d3fb2ee12507f28c1cc58792cfbb6e48e2b52866","tarball":"http://registry.npmjs.org/colorjoe/-/colorjoe-0.7.2.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"bebraw","email":"bebraw@gmail.com"},"maintainers":[{"name":"bebraw","email":"bebraw@gmail.com"}],"directories":{}},"0.8.1":{"name":"colorjoe","description":"Scaleable color picker","author":{"name":"Juho Vepsalainen","email":"bebraw@gmail.com"},"version":"0.8.1","dependencies":{"drag.js":"0.3.8","onecolor":"2.3.4","grunt":"0.4.1","grunt-contrib-watch":"0.4.4","grunt-contrib-uglify":"0.2.2","grunt-contrib-concat":"0.3.0"},"repository":{"type":"git","url":"https://bebraw@github.com/bebraw/colorjoe.git"},"homepage":"https://bebraw.github.com/colorjoe","bugs":{"url":"https://github.com/bebraw/colorjoe/issues"},"keywords":["color","colour","requirejs","amd"],"main":"dist/colorjoe.js","license":"MIT","licenses":[{"type":"MIT","url":"https://github.com/bebraw/colorjoe/blob/master/LICENSE"}],"readme":"# colorjoe - The Scaleable Color Picker\n\ncolorjoe was somewhat inspired by\n[ColorJack](http://www.dynamicdrive.com/dynamicindex11/colorjack/index.htm) and\n[RightJS Colorpicker](http://rightjs.org/ui/colorpicker). Unlike those it\nactually scales pretty well. Essentially this means that you'll be able to\ndefine its actual dimensions and layout using a bit of CSS. This way the widget\nfits well responsive layouts.\n\nIn addition it's relatively easy to implement missing functionality (RGB fields,\nwhatnot) thanks to the simple API it provides.\n\n## Installation\n\nAdd prepackaged `dist/colorjoe.js` and `css/colorjoe.css` to your page or use AMD to load\nthe dependencies from `src/`.\n\n## Usage\n\n```javascript\nvar joe = colorjoe.rgb(element_id_or_dom_object, initial_color_value, extras);\n```\n\nor\n\n```javascript\nvar joe = colorjoe.hsl(element_id_or_dom_object, initial_color_value, extras);\n```\n\n### Event Handling\n\nThe returned joe object is an event emitter style object with `change` and\n`done` events. The `change` event is fired continuously when selecting and\n`done` is fired when user has stopped selecting.\n\n\n```javascript\njoe.on(\"change\", function(color) {\n    console.log(\"Selecting \" + color.css());\n});\n\njoe.on(\"done\", function(color) {\n    console.log(\"Selected \" + color.css());\n});\n```\n\nThe color object is from [one.color](https://github.com/One-com/one-color).\n\nGiven it might be nice to trigger these events immediately, there is a specific\n`update` method. Ie. joe.on(\"change\", function() {...}).update() would trigger\n`change` immediately. This is handy for initializing your work.\n\n### Get and Set\n\nIn addition there are `set` and `get` methods. Ie. joe.get() would return the\ncurrent color while joe.set('#aabbcc') would set it. `set` expects a parameter\nthat one.color default constructor would accept.\n\n### Extras\n\nIn order to make it easier to customize a picker based on your needs, colorjoe\nprovides a few extras. The following example shows how to use them:\n\n```javascript\nvar joe = colorjoe.hsl('hslPicker', 'red', [\n    'currentColor',\n    'alpha',\n    ['fields', {space: 'HSL', limit: 255, fix: 0},\n    'hex'\n]);\n```\n\nThe code above would generate a HSL picker that shows in addition the currently\nselected color, alpha slider, HSL input fields and a hex field.\n\nAs you can see `fields` has been defined using an array. This array contains\nthe name of the extra and then parameters passed to inside an object. In this\ncase the extra accepts name of a color space (RGB, HSL, HSV or CMYK). If you\nappend `A` to the color space, it will show a control for alpha too. In\naddition it takes a limit value (defaults to 255) and a fix value\n(defaults to 0). fix represents the amount of numbers shown after decimal.\n\n`hex` extra accepts optional `label`. If set it will show that as the input's\nlabel.\n\n### Implementing Custom Extras\n\nIt is possible to implement your custom extras without having to hack the core\ncode. This can be done as follows:\n\n```javascript\ncolorjoe.registerExtra('text', function(p, joe, o) {\n    // attach new elements to p element here (as children that is)\n    // o is optional and will contain any parameters you might have\n    // passed to the extra using the array syntax\n\n    // optional return. these are triggered by colorjoe\n    // use this way instead of joe.on\n    return {\n        change: function(col) {},\n        done: function(col) {}\n    };\n})\n```\n\nNow you can simply pass your `text` extra amongst the others and it will just\nwork.\n\n## Contributors\n\n* [Juho Vepsäläinen](https://github.com/bebraw) - Core\n* [Esa-Matti Suuronen](https://github.com/epeli) -\n  [Grunt](https://github.com/cowboy/grunt) support + removeAllListeners\n* [Peter Müller](https://github.com/Munter) -\n  [one.color](https://github.com/One-com/one-color) + HTML tweaks\n* [Edmundas Kondrašovas](https://github.com/edmundask) - Callback `done` fix\n\n## Hacking\n\nDownload the dependencies using `npm` (npm install) and then use [grunt](http://gruntjs.com/) to build prepackaged files in `dist/`.\n\n## License\n\ncolorjoe is available under MIT. See [LICENSE](https://github.com/bebraw/colorjoe/blob/master/LICENSE) for more details.\n\n","readmeFilename":"README.md","_id":"colorjoe@0.8.1","dist":{"shasum":"e3a5252a8b1cfce4bc6e9611e7e26e74c9986d96","tarball":"http://registry.npmjs.org/colorjoe/-/colorjoe-0.8.1.tgz"},"_from":".","_npmVersion":"1.2.28","_npmUser":{"name":"bebraw","email":"bebraw@gmail.com"},"maintainers":[{"name":"bebraw","email":"bebraw@gmail.com"}],"directories":{}},"0.9.0":{"name":"colorjoe","description":"Scaleable color picker","author":{"name":"Juho Vepsalainen","email":"bebraw@gmail.com"},"version":"0.9.0","dependencies":{"dragjs":"0.4.1","onecolor":"2.3.4","grunt":"0.4.1","grunt-contrib-watch":"0.4.4","grunt-contrib-uglify":"0.2.2","grunt-contrib-concat":"0.3.0","grunt-umd":"1.0.0"},"repository":{"type":"git","url":"https://bebraw@github.com/bebraw/colorjoe.git"},"homepage":"https://bebraw.github.com/colorjoe","bugs":{"url":"https://github.com/bebraw/colorjoe/issues"},"keywords":["color","colour","requirejs","amd"],"main":"dist/colorjoe.js","license":"MIT","licenses":[{"type":"MIT","url":"https://github.com/bebraw/colorjoe/blob/master/LICENSE"}],"readme":"# colorjoe - The Scaleable Color Picker\n\ncolorjoe was somewhat inspired by\n[ColorJack](http://www.dynamicdrive.com/dynamicindex11/colorjack/index.htm) and\n[RightJS Colorpicker](http://rightjs.org/ui/colorpicker). Unlike those it\nactually scales pretty well. Essentially this means that you'll be able to\ndefine its actual dimensions and layout using a bit of CSS. This way the widget\nfits well responsive layouts.\n\nIn addition it's relatively easy to implement missing functionality (RGB fields,\nwhatnot) thanks to the simple API it provides.\n\n## Installation\n\nAdd prepackaged `dist/colorjoe.js` and `css/colorjoe.css` to your page or use AMD to load\nthe dependencies from `src/`.\n\n## Usage\n\n```javascript\nvar joe = colorjoe.rgb(element_id_or_dom_object, initial_color_value, extras);\n```\n\nor\n\n```javascript\nvar joe = colorjoe.hsl(element_id_or_dom_object, initial_color_value, extras);\n```\n\n### Event Handling\n\nThe returned joe object is an event emitter style object with `change` and\n`done` events. The `change` event is fired continuously when selecting and\n`done` is fired when user has stopped selecting.\n\n\n```javascript\njoe.on(\"change\", function(color) {\n    console.log(\"Selecting \" + color.css());\n});\n\njoe.on(\"done\", function(color) {\n    console.log(\"Selected \" + color.css());\n});\n```\n\nThe color object is from [one.color](https://github.com/One-com/one-color).\n\nGiven it might be nice to trigger these events immediately, there is a specific\n`update` method. Ie. joe.on(\"change\", function() {...}).update() would trigger\n`change` immediately. This is handy for initializing your work.\n\n### Get and Set\n\nIn addition there are `set` and `get` methods. Ie. joe.get() would return the\ncurrent color while joe.set('#aabbcc') would set it. `set` expects a parameter\nthat one.color default constructor would accept.\n\n### Extras\n\nIn order to make it easier to customize a picker based on your needs, colorjoe\nprovides a few extras. The following example shows how to use them:\n\n```javascript\nvar joe = colorjoe.hsl('hslPicker', 'red', [\n    'currentColor',\n    'alpha',\n    ['fields', {space: 'HSL', limit: 255, fix: 0},\n    'hex'\n]);\n```\n\nThe code above would generate a HSL picker that shows in addition the currently\nselected color, alpha slider, HSL input fields and a hex field.\n\nAs you can see `fields` has been defined using an array. This array contains\nthe name of the extra and then parameters passed to inside an object. In this\ncase the extra accepts name of a color space (RGB, HSL, HSV or CMYK). If you\nappend `A` to the color space, it will show a control for alpha too. In\naddition it takes a limit value (defaults to 255) and a fix value\n(defaults to 0). fix represents the amount of numbers shown after decimal.\n\n`hex` extra accepts optional `label`. If set it will show that as the input's\nlabel.\n\n### Implementing Custom Extras\n\nIt is possible to implement your custom extras without having to hack the core\ncode. This can be done as follows:\n\n```javascript\ncolorjoe.registerExtra('text', function(p, joe, o) {\n    // attach new elements to p element here (as children that is)\n    // o is optional and will contain any parameters you might have\n    // passed to the extra using the array syntax\n\n    // optional return. these are triggered by colorjoe\n    // use this way instead of joe.on\n    return {\n        change: function(col) {},\n        done: function(col) {}\n    };\n})\n```\n\nNow you can simply pass your `text` extra amongst the others and it will just\nwork.\n\n## Contributors\n\n* [Juho Vepsäläinen](https://github.com/bebraw) - Core\n* [Esa-Matti Suuronen](https://github.com/epeli) -\n  [Grunt](https://github.com/cowboy/grunt) support + removeAllListeners\n* [Peter Müller](https://github.com/Munter) -\n  [one.color](https://github.com/One-com/one-color) + HTML tweaks\n* [Edmundas Kondrašovas](https://github.com/edmundask) - Callback `done` fix\n\n## Hacking\n\nDownload the dependencies using `npm` (npm install) and then use [grunt](http://gruntjs.com/) to build prepackaged files in `dist/`.\n\n## License\n\ncolorjoe is available under MIT. See [LICENSE](https://github.com/bebraw/colorjoe/blob/master/LICENSE) for more details.\n\n","readmeFilename":"README.md","_id":"colorjoe@0.9.0","dist":{"shasum":"b6d5dbb7407b0534b59703540c24c20cff55547c","tarball":"http://registry.npmjs.org/colorjoe/-/colorjoe-0.9.0.tgz"},"_from":".","_npmVersion":"1.3.1","_npmUser":{"name":"bebraw","email":"bebraw@gmail.com"},"maintainers":[{"name":"bebraw","email":"bebraw@gmail.com"}],"directories":{}},"0.9.1":{"name":"colorjoe","description":"Scaleable color picker","author":{"name":"Juho Vepsalainen","email":"bebraw@gmail.com"},"version":"0.9.1","dependencies":{"dragjs":"0.4.1","grunt":"0.4.1","grunt-contrib-watch":"0.4.4","grunt-contrib-uglify":"0.2.2","grunt-contrib-concat":"0.3.0","grunt-umd":"https://github.com/bebraw/grunt-umd/tarball/master"},"repository":{"type":"git","url":"https://bebraw@github.com/bebraw/colorjoe.git"},"homepage":"https://bebraw.github.com/colorjoe","bugs":{"url":"https://github.com/bebraw/colorjoe/issues"},"keywords":["color","colour","requirejs","amd"],"main":"dist/colorjoe.js","license":"MIT","licenses":[{"type":"MIT","url":"https://github.com/bebraw/colorjoe/blob/master/LICENSE"}],"readme":"# colorjoe - The Scaleable Color Picker\n\ncolorjoe was somewhat inspired by\n[ColorJack](http://www.dynamicdrive.com/dynamicindex11/colorjack/index.htm) and\n[RightJS Colorpicker](http://rightjs.org/ui/colorpicker). Unlike those it\nactually scales pretty well. Essentially this means that you'll be able to\ndefine its actual dimensions and layout using a bit of CSS. This way the widget\nfits well responsive layouts.\n\nIn addition it's relatively easy to implement missing functionality (RGB fields,\nwhatnot) thanks to the simple API it provides.\n\n## Installation\n\nAdd prepackaged `dist/colorjoe.js` and `css/colorjoe.css` to your page or use AMD to load\nthe dependencies from `src/`.\n\nNote that you need to load [one.color](https://github.com/One-com/one-color) before using `colorjoe`. In case you are using RequireJS, shim it at your configuration so that it is bound to `onecolor`.\n\n## Usage\n\n```javascript\nvar joe = colorjoe.rgb(element_id_or_dom_object, initial_color_value, extras);\n```\n\nor\n\n```javascript\nvar joe = colorjoe.hsl(element_id_or_dom_object, initial_color_value, extras);\n```\n\n### Event Handling\n\nThe returned joe object is an event emitter style object with `change` and\n`done` events. The `change` event is fired continuously when selecting and\n`done` is fired when user has stopped selecting.\n\n\n```javascript\njoe.on(\"change\", function(color) {\n    console.log(\"Selecting \" + color.css());\n});\n\njoe.on(\"done\", function(color) {\n    console.log(\"Selected \" + color.css());\n});\n```\n\nThe color object is from [one.color](https://github.com/One-com/one-color).\n\nGiven it might be nice to trigger these events immediately, there is a specific\n`update` method. Ie. joe.on(\"change\", function() {...}).update() would trigger\n`change` immediately. This is handy for initializing your work.\n\n### Get and Set\n\nIn addition there are `set` and `get` methods. Ie. joe.get() would return the\ncurrent color while joe.set('#aabbcc') would set it. `set` expects a parameter\nthat one.color default constructor would accept.\n\n### Extras\n\nIn order to make it easier to customize a picker based on your needs, colorjoe\nprovides a few extras. The following example shows how to use them:\n\n```javascript\nvar joe = colorjoe.hsl('hslPicker', 'red', [\n    'currentColor',\n    'alpha',\n    ['fields', {space: 'HSL', limit: 255, fix: 0},\n    'hex'\n]);\n```\n\nThe code above would generate a HSL picker that shows in addition the currently\nselected color, alpha slider, HSL input fields and a hex field.\n\nAs you can see `fields` has been defined using an array. This array contains\nthe name of the extra and then parameters passed to inside an object. In this\ncase the extra accepts name of a color space (RGB, HSL, HSV or CMYK). If you\nappend `A` to the color space, it will show a control for alpha too. In\naddition it takes a limit value (defaults to 255) and a fix value\n(defaults to 0). fix represents the amount of numbers shown after decimal.\n\n`hex` extra accepts optional `label`. If set it will show that as the input's\nlabel.\n\n### Implementing Custom Extras\n\nIt is possible to implement your custom extras without having to hack the core\ncode. This can be done as follows:\n\n```javascript\ncolorjoe.registerExtra('text', function(p, joe, o) {\n    // attach new elements to p element here (as children that is)\n    // o is optional and will contain any parameters you might have\n    // passed to the extra using the array syntax\n\n    // optional return. these are triggered by colorjoe\n    // use this way instead of joe.on\n    return {\n        change: function(col) {},\n        done: function(col) {}\n    };\n})\n```\n\nNow you can simply pass your `text` extra amongst the others and it will just\nwork.\n\n## Contributors\n\n* [Juho Vepsäläinen](https://github.com/bebraw) - Core\n* [Esa-Matti Suuronen](https://github.com/epeli) -\n  [Grunt](https://github.com/cowboy/grunt) support + removeAllListeners\n* [Peter Müller](https://github.com/Munter) -\n  [one.color](https://github.com/One-com/one-color) + HTML tweaks\n* [Edmundas Kondrašovas](https://github.com/edmundask) - Callback `done` fix\n\n## Hacking\n\nDownload the dependencies using `npm` (npm install) and then use [grunt](http://gruntjs.com/) to build prepackaged files in `dist/`.\n\n## License\n\ncolorjoe is available under MIT. See [LICENSE](https://github.com/bebraw/colorjoe/blob/master/LICENSE) for more details.\n\n","readmeFilename":"README.md","_id":"colorjoe@0.9.1","dist":{"shasum":"dbd91432eb9c6e15b74c857b9e55e4c6495f26a1","tarball":"http://registry.npmjs.org/colorjoe/-/colorjoe-0.9.1.tgz"},"_from":".","_npmVersion":"1.3.1","_npmUser":{"name":"bebraw","email":"bebraw@gmail.com"},"maintainers":[{"name":"bebraw","email":"bebraw@gmail.com"}],"directories":{}},"0.9.2":{"name":"colorjoe","description":"Scaleable color picker","author":{"name":"Juho Vepsalainen","email":"bebraw@gmail.com"},"version":"0.9.2","dependencies":{"dragjs":"0.4.1"},"devDependencies":{"grunt":"0.4.1","grunt-contrib-watch":"0.4.4","grunt-contrib-uglify":"0.2.2","grunt-contrib-concat":"0.3.0","grunt-umd":"1.1.0"},"repository":{"type":"git","url":"https://bebraw@github.com/bebraw/colorjoe.git"},"homepage":"https://bebraw.github.com/colorjoe","bugs":{"url":"https://github.com/bebraw/colorjoe/issues"},"keywords":["color","colour","requirejs","amd"],"main":"dist/colorjoe.js","license":"MIT","licenses":[{"type":"MIT","url":"https://github.com/bebraw/colorjoe/blob/master/LICENSE"}],"readme":"# colorjoe - The Scaleable Color Picker\n\ncolorjoe was somewhat inspired by\n[ColorJack](http://www.dynamicdrive.com/dynamicindex11/colorjack/index.htm) and\n[RightJS Colorpicker](http://rightjs.org/ui/colorpicker). Unlike those it\nactually scales pretty well. Essentially this means that you'll be able to\ndefine its actual dimensions and layout using a bit of CSS. This way the widget\nfits well responsive layouts.\n\nIn addition it's relatively easy to implement missing functionality (RGB fields,\nwhatnot) thanks to the simple API it provides.\n\n## Installation\n\nAdd prepackaged `dist/colorjoe.js` and `css/colorjoe.css` to your page or use AMD to load\nthe dependencies from `src/`.\n\nNote that you need to load [one.color](https://github.com/One-com/one-color) before using `colorjoe`. In case you are using RequireJS, shim it at your configuration so that it is bound to `onecolor`.\n\n## Usage\n\n```javascript\nvar joe = colorjoe.rgb(element_id_or_dom_object, initial_color_value, extras);\n```\n\nor\n\n```javascript\nvar joe = colorjoe.hsl(element_id_or_dom_object, initial_color_value, extras);\n```\n\n### Event Handling\n\nThe returned joe object is an event emitter style object with `change` and\n`done` events. The `change` event is fired continuously when selecting and\n`done` is fired when user has stopped selecting.\n\n\n```javascript\njoe.on(\"change\", function(color) {\n    console.log(\"Selecting \" + color.css());\n});\n\njoe.on(\"done\", function(color) {\n    console.log(\"Selected \" + color.css());\n});\n```\n\nThe color object is from [one.color](https://github.com/One-com/one-color).\n\nGiven it might be nice to trigger these events immediately, there is a specific\n`update` method. Ie. joe.on(\"change\", function() {...}).update() would trigger\n`change` immediately. This is handy for initializing your work.\n\n### Get and Set\n\nIn addition there are `set` and `get` methods. Ie. joe.get() would return the\ncurrent color while joe.set('#aabbcc') would set it. `set` expects a parameter\nthat one.color default constructor would accept.\n\n### Extras\n\nIn order to make it easier to customize a picker based on your needs, colorjoe\nprovides a few extras. The following example shows how to use them:\n\n```javascript\nvar joe = colorjoe.hsl('hslPicker', 'red', [\n    'currentColor',\n    'alpha',\n    ['fields', {space: 'HSL', limit: 255, fix: 0},\n    'hex'\n]);\n```\n\nThe code above would generate a HSL picker that shows in addition the currently\nselected color, alpha slider, HSL input fields and a hex field.\n\nAs you can see `fields` has been defined using an array. This array contains\nthe name of the extra and then parameters passed to inside an object. In this\ncase the extra accepts name of a color space (RGB, HSL, HSV or CMYK). If you\nappend `A` to the color space, it will show a control for alpha too. In\naddition it takes a limit value (defaults to 255) and a fix value\n(defaults to 0). fix represents the amount of numbers shown after decimal.\n\n`hex` extra accepts optional `label`. If set it will show that as the input's\nlabel.\n\n### Implementing Custom Extras\n\nIt is possible to implement your custom extras without having to hack the core\ncode. This can be done as follows:\n\n```javascript\ncolorjoe.registerExtra('text', function(p, joe, o) {\n    // attach new elements to p element here (as children that is)\n    // o is optional and will contain any parameters you might have\n    // passed to the extra using the array syntax\n\n    // optional return. these are triggered by colorjoe\n    // use this way instead of joe.on\n    return {\n        change: function(col) {},\n        done: function(col) {}\n    };\n})\n```\n\nNow you can simply pass your `text` extra amongst the others and it will just\nwork.\n\n## Contributors\n\n* [Juho Vepsäläinen](https://github.com/bebraw) - Core\n* [Esa-Matti Suuronen](https://github.com/epeli) -\n  [Grunt](https://github.com/cowboy/grunt) support + removeAllListeners\n* [Peter Müller](https://github.com/Munter) -\n  [one.color](https://github.com/One-com/one-color) + HTML tweaks\n* [Edmundas Kondrašovas](https://github.com/edmundask) - Callback `done` fix\n* [Fabio Caseri](https://github.com/fabiocaseri) - Use hex code instead of `black`\n\n## Hacking\n\nDownload the dependencies using `npm` (npm install) and then use [grunt](http://gruntjs.com/) to build prepackaged files in `dist/`.\n\n## License\n\ncolorjoe is available under MIT. See [LICENSE](https://github.com/bebraw/colorjoe/blob/master/LICENSE) for more details.\n\n","readmeFilename":"README.md","_id":"colorjoe@0.9.2","dist":{"shasum":"c9ac6b9833a9ac576001ae4eb858660d9ee46b5a","tarball":"http://registry.npmjs.org/colorjoe/-/colorjoe-0.9.2.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"bebraw","email":"bebraw@gmail.com"},"maintainers":[{"name":"bebraw","email":"bebraw@gmail.com"}],"directories":{}}},"readme":"# colorjoe - The Scaleable Color Picker\n\ncolorjoe was somewhat inspired by\n[ColorJack](http://www.dynamicdrive.com/dynamicindex11/colorjack/index.htm) and\n[RightJS Colorpicker](http://rightjs.org/ui/colorpicker). Unlike those it\nactually scales pretty well. Essentially this means that you'll be able to\ndefine its actual dimensions and layout using a bit of CSS. This way the widget\nfits well responsive layouts.\n\nIn addition it's relatively easy to implement missing functionality (RGB fields,\nwhatnot) thanks to the simple API it provides.\n\n## Installation\n\nAdd prepackaged `dist/colorjoe.js` and `css/colorjoe.css` to you page or use AMD to load\nthe dependencies from `src/`.\n\n## Usage\n\n```javascript\nvar joe = colorjoe.rgb(element_id_or_dom_object, initial_color_value, extras);\n```\n\nor\n\n```javascript\nvar joe = colorjoe.hsl(element_id_or_dom_object, initial_color_value, extras);\n```\n\n### Event Handling\n\nThe returned joe object is an event emitter style object with `change` and\n`done` events. The `change` event is fired continuously when selecting and\n`done` is fired when user has stopped selecting.\n\n\n```javascript\njoe.on(\"change\", function(color) {\n    console.log(\"Selecting \" + color.css());\n});\n\njoe.on(\"done\", function(color) {\n    console.log(\"Selected \" + color.css());\n});\n```\n\nThe color object is from [one.color](https://github.com/One-com/one-color).\n\nGiven it might be nice to trigger these events immediately, there is a specific\n`update` method. Ie. joe.on(\"change\", function() {...}).update() would trigger\n`change` immediately. This is handy for initializing your work.\n\n### Get and Set\n\nIn addition there are `set` and `get` methods. Ie. joe.get() would return the\ncurrent color while joe.set('#aabbcc') would set it. `set` expects a parameter\nthat one.color default constructor would accept.\n\n### Extras\n\nIn order to make it easier to customize a picker based on your needs, colorjoe\nprovides a few extras. The following example shows how to use them:\n\n```javascript\nvar joe = colorjoe.hsl('hslPicker', 'red', [\n    colorjoe.extras.currentColor,\n    colorjoe.extras.fields('HSL', 255, 0),\n    colorjoe.extras.hex\n]);\n```\n\nThe code above would generate a HSL picker that shows in addition the currently\nselected color, HSL input fields and a hex field.\n\n`fields` extra is a factory that accepts name of a color space (RGB, HSL, HSV\nor CMYK). In addition it takes maximum value (defaults to 255) and a fix value\n(defaults to 2). fix represents the amount of numbers shown after decimal.\n\n## Contributors\n\n* [Juho Vepsäläinen](https://github.com/bebraw) - Core\n* [Esa-Matti Suuronen](https://github.com/epeli) -\n  [Grunt](https://github.com/cowboy/grunt) support + removeAllListeners\n* [Peter Müller](https://github.com/Munter) -\n  [one.color](https://github.com/One-com/one-color) + HTML tweaks\n\n## Hacking\n\nDownload the dependencies using `npm` (npm install) and then use [grunt](http://gruntjs.com/) to build prepackaged files in `dist/`.\n\n## License\n\ncolorjoe is available under MIT. See [LICENSE](https://github.com/bebraw/colorjoe/blob/master/LICENSE) for more details.\n\n","maintainers":[{"name":"bebraw","email":"bebraw@gmail.com"}],"time":{"modified":"2013-09-24T18:43:04.439Z","created":"2012-07-08T08:33:21.058Z","0.5.5":"2012-07-08T08:33:23.151Z","0.5.6":"2012-07-08T11:10:30.318Z","0.5.7":"2012-07-08T11:22:01.466Z","0.5.8":"2012-07-09T08:18:39.149Z","0.5.9":"2012-07-09T09:37:59.193Z","0.6.0":"2012-07-09T10:07:57.271Z","0.6.1":"2012-07-10T19:41:47.149Z","0.6.2":"2012-07-11T10:14:34.496Z","0.7.0":"2012-07-11T15:51:28.227Z","0.7.1":"2012-11-07T09:54:44.184Z","0.7.2":"2012-12-06T12:37:27.733Z","0.8.1":"2013-06-25T09:49:21.279Z","0.9.0":"2013-07-17T12:40:06.795Z","0.9.1":"2013-07-18T11:27:14.442Z","0.9.2":"2013-09-24T18:43:04.439Z"},"author":{"name":"Juho Vepsalainen","email":"bebraw@gmail.com"},"repository":{"type":"git","url":"https://bebraw@github.com/bebraw/colorjoe.git"},"users":{},"_attachments":{},"_etag":"\"8SYYB8MLW5XMMFL3XHG01NSRR\""}